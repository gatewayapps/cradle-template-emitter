import { List, Record } from 'immutable'
{{~ it.Properties :value }}
{{? value.TypeName === "Array"}}
import {I{{=value.MemberType.ModelName}}, {{=value.MemberType.ModelName}}} from './{{=value.MemberType.ModelName}}'
{{?? value.ModelName !== undefined}}
import {I{{=value.ModelName}}, {{=value.ModelName}}} from './{{=value.ModelName}}'
{{?}}
{{~}}

export interface I{{=it.Name}} {
    {{~ it.Properties :value:index}}
    {{? value.AllowNull }}
    {{? value.TypeName === "Array"}}
    readonly {{=value.Name}}?: List<I{{=value.MemberType.ModelName}}>
    {{?? value.ModelName !== undefined}}
    readonly {{=value.Name}}?: I{{=value.ModelName}}
    {{??}}
    readonly {{=value.Name}}?: {{=value.TypeName}}
    {{?}}
    {{??}}
    {{? value.TypeName === "Array"}}
    readonly {{=value.Name}}: List<I{{=value.MemberType.ModelName}}>
    {{?? value.ModelName !== undefined}}
    readonly {{=value.Name}}?: I{{=value.ModelName}}
    {{??}}
    readonly {{=value.Name}}: {{=value.TypeName}}
    {{?}}
    {{?}}
    {{~}}
}

const {{=it.Name}}Record = Record({
    {{~ it.Properties :value:index}}
    {{? value.ModelName }}
    {{=value.Name}}: new {{=value.ModelName}}(),
    {{?? value.TypeName === "Array"}}
    {{=value.Name}}: List<{{=value.MemberType.ModelName}}>(),
    {{??}}
    {{=value.Name}}: {{=value.DefaultValue}},
    {{?}}
    {{~}}
})

export class {{=it.Name}} extends {{=it.Name}}Record implements I{{=it.Name}} {
    public static fromJS(initialState?: Partial<I{{=it.Name}}>) {
        return new {{=it.Name}}(initialState)
    }
    {{~ it.Properties :value:index}}
    {{? value.AllowNull }}
    {{? value.TypeName === "Array"}}
    public readonly {{=value.Name}}?: List<{{=value.MemberType.ModelName}}>
    {{??}}
    public readonly {{=value.Name}}?: {{=value.TypeName}}
    {{?}}
    {{??}}
    {{? value.TypeName === "Array"}}
    public readonly {{=value.Name}}: List<{{=value.MemberType.ModelName}}>
    {{??}}
    public readonly {{=value.Name}}: {{=value.TypeName}}
    {{?}}
    {{?}}
    {{~}}
    constructor(initialState?: Partial<{{=it.Name}}>) {
        initialState ? super(initialState) : super()
    }
}
